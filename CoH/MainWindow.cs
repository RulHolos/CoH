using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Reflection;
using System.Numerics;

using Raylib_cs;
using rlImGui_cs;
using ImGuiNET;
using CoH.Game;
using Serilog;
using CoH.Game.Views;
using CoH.GameData;

namespace CoH;

/*
 * For maps: Use Tiled and DotTiled(for parsing)
 * Put the player on the "Player" layer. It MUST be named "Player", not "player" or anything other.
 * Named layers:
 * Player (Object Layer) : Where to render the player in the tile order.
 * Events (Tile Layer) : All tiles in the event layer are treated as events, they have custom attributes on tiled.
 */

public static class MainWindow
{
    public static Version? VersionNumber = Assembly.GetEntryAssembly()?.GetName().Version;
    public static string PathToResources = Path.Combine(Directory.GetCurrentDirectory(), "Assets");
    public static string PathToSave = Path.Combine(Directory.GetCurrentDirectory(), "Save");
    public static Vector2 GameViewport;

    public static View FirstView { get; private set; } = new MainMenu();
    public static View? CurrentView { get; set; }

    /// <summary>
    /// Initializes the game window and starts the game loop.<br/>
    /// This is a blocking method.
    /// </summary>
    public static void Initialize()
    {
        Config conf = Configuration.Load();
        GameViewport = new(conf.WindowSizeX, conf.WindowSizeY);

        CreateLogger();

        Raylib.SetConfigFlags(ConfigFlags.Msaa4xHint | ConfigFlags.HighDpiWindow | ConfigFlags.VSyncHint);
        Raylib.InitWindow(conf.WindowSizeX, conf.WindowSizeY, $"Myara 2 ~ Cycle of Hakurama | v{VersionNumber}");
        Raylib.SetExitKey(KeyboardKey.Null);
        Raylib.SetTargetFPS(60);

        Raylib.InitAudioDevice();

        rlImGui.Setup(true, true);
        ImGui.GetIO().ConfigWindowsMoveFromTitleBarOnly = true;

        while (!Raylib.IsWindowReady())
            continue;
        
        Startup();

        while (!Raylib.WindowShouldClose())
        {
            float dt = Raylib.GetFrameTime();

            BeforeFrame(dt);
            Frame(dt);
            AfterFrame(dt);

            BeforeRender(dt);
            Render(dt);
#if DEBUG
            RenderGUI(dt);
#endif
            AfterRender(dt);
        }

        Dispose();

        rlImGui.Shutdown();
        Raylib.CloseAudioDevice();
        Raylib.CloseWindow();
    }

    private static void CreateLogger()
    {
        /*string pathToLog = Path.Combine(Directory.GetCurrentDirectory(), "Engine.log");
        if (File.Exists(pathToLog))
            File.Delete(pathToLog);*/

        Log.Logger = new LoggerConfiguration()
            .WriteTo.Console()
            .WriteTo.File("Engine.log",
                rollingInterval: RollingInterval.Infinite,
                rollOnFileSizeLimit: true)
            .CreateLogger();
    }

    public static void Dispose()
    {
        CurrentView?.Unload();
    }

    #region GameLoop

    /// <summary>
    /// Initializes all the main things that needs to be initialized at startup.<br/>
    /// Only runs once BEFORE any frame or render are called.<br/>
    /// You <i><b>shouldn't</b></i> do any frame or render calculation in the method scope.
    /// </summary>
    private static void Startup()
    {
        FirstView.Load();
    }

    private static void BeforeFrame(float deltaTime)
    {
        CurrentView?.BeforeFrame(deltaTime);
    }

    /// <summary>
    /// Computes a single game frame.
    /// </summary>
    /// <param name="deltaTime">DeltaTime IN SECONDS</param>
    private static void Frame(float deltaTime)
    {
        CurrentView?.Frame(deltaTime);
    }

    private static void AfterFrame(float deltaTime)
    {
        CurrentView?.AfterFrame(deltaTime);
    }

    #region Rendering

    /// <summary>
    /// Prepares the viewport.
    /// </summary>
    /// <param name="vinf">Viewport information generated by this method.</param>
    /// <param name="deltaTime">DeltaTime IN SECONDS</param>
    private static void BeforeRender(float deltaTime)
    {
        Raylib.BeginDrawing();
        Raylib.ClearBackground(Color.Black);
    }

    /// <summary>
    /// Renders the game screen.
    /// </summary>
    /// <param name="deltaTime">DeltaTime IN SECONDS</param>
    private static void Render(float deltaTime)
    {
        CurrentView?.Render(deltaTime);
    }

    /// <summary>
    /// Finalizes the viewport.
    /// </summary>
    /// <param name="deltaTime">DeltaTime IN SECONDS</param>
    private static void AfterRender(float deltaTime)
    {
        Raylib.EndDrawing();
    }

    #endregion

    /// <summary>
    /// Renders the ImGui windows.
    /// </summary>
    /// <param name="deltaTime">DeltaTime IN SECONDS</param>
    private static void RenderGUI(float deltaTime)
    {
        rlImGui.Begin();

        // Do things.
        CurrentView?.RenderGUI(deltaTime);

        rlImGui.End();
    }

    #endregion
}
